// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  login             String            @id
  id_academia       String
  nome              String
  senha             String
  
  academia          Academias         @relation("admin", fields: [id_academia], references: [id])

  @@map("users")
}



model Academias {
  id                String            @id @default(uuid())
  nome              String
  telefone          String

  classes     Classes[]               @relation("classe")
  ranking     Ranking[]               @relation("ranking")
  tenistas    Tenistas[]              @relation("tenista")
  Torneios    Torneios[]              @relation("torneio")
  User        User[]                  @relation("admin")

  @@map("academias")
}



model Classes {
  sigla             String            @id
  id_academia       String
  nome              String
  masculino         Boolean           @default(false)
  misto             Boolean           @default(false)
  dupla             Boolean           @default(false)

  academia          Academias         @relation("classe", fields: [id_academia], references: [id])
  classeRanking     ClasseRanking[]   @relation("classe")

  @@map("classes")
}



model Ranking {
  id                Int               @id @default(autoincrement())
  id_academia       String
  nome              String

  academia          Academias         @relation("ranking", fields: [id_academia], references: [id])
  classeRanking     ClasseRanking[]   @relation("ranking")

  @@map("ranking")
}



model ClasseRanking {
  id                Int               @id @default(autoincrement())
  id_classe         String
  id_ranking        Int

  classe            Classes           @relation("classe", fields: [id_classe], references: [sigla])
  ranking           Ranking           @relation("ranking", fields: [id_ranking], references: [id])

  @@map("classeRanking")
  ClasseTorneio ClasseTorneio[] @relation("classe")
}



model Tenistas {
  cpf               String            @id
  id_academia       String
  nome              String

  academia          Academias         @relation("tenista", fields: [id_academia], references: [id])
  Inscricao1        Inscricao[]       @relation("inscricao_tenista")
  Inscricao2        Inscricao[]       @relation("inscricao_tenista2")

  @@map("tenistas")
}



model Status {
  id                Int               @id @default(autoincrement())
  nome              String

  Torneios          Torneios[]        @relation("torneio")

  @@map("status")
}



model PontuacoesCampeonato {
  id                Int               @id @default(autoincrement())
  vencedor          Int               @default(100)
  r1                Int               @default(70)
  r2                Int               @default(60)
  r4                Int               @default(50)
  r8                Int               @default(30)
  r16               Int               @default(20)
  r32               Int               @default(10)
  r64               Int               @default(05)
  participacao      Int               @default(05)

  Torneios          Torneios[]        @relation("torneio")

  @@map("pontuacoesCampeonato")
}



model Torneios {
  id                String            @id @default(uuid())
  id_academia       String
  id_status         Int
  id_pontuacoes     Int
  nome              String
  descricao         String
  local             String
  simples           Boolean
  duplas            Boolean
  ranking           Boolean
  sets              Int
  tiebreakao        Boolean
  dataInicio        DateTime
  dataFim           DateTime

  academia          Academias         @relation("torneio", fields: [id_academia], references: [id])
  status            Status            @relation("torneio", fields: [id_status], references: [id])
  pontuacoes        PontuacoesCampeonato @relation("torneio", fields: [id_pontuacoes], references: [id])
  ClasseTorneio     ClasseTorneio[] @relation("classe")

  @@map("campeonatos")
}



model ClasseTorneio {
  id                Int               @id @default(autoincrement())
  id_classeRanking  Int
  id_torneio        String
  cabecasChave      Int

  classeRanking     ClasseRanking     @relation("classe", fields: [id_classeRanking], references: [id])
  torneio           Torneios          @relation("classe", fields: [id_torneio], references: [id])
  Inscricao         Inscricao[]       @relation("inscricao")

  @@map("classeTorneio")
}



model Inscricao {
  id                Int               @id @default(autoincrement())
  id_tenista        String
  id_tenista2       String?
  id_classetorneio  Int
  
  tenista1          Tenistas          @relation("inscricao_tenista", fields: [id_tenista], references: [cpf])
  tenista2          Tenistas?         @relation("inscricao_tenista2", fields: [id_tenista2], references: [cpf])
  classeTorneio     ClasseTorneio     @relation("inscricao", fields: [id_classetorneio], references: [id])
  Partidas1         Partidas[]        @relation("inscricao1")
  Partidas2         Partidas[] @relation("inscricao2")
  
  @@map("inscricao")
}



model Partidas {
  id              Int                 @id @default(autoincrement())
  id_inscricao    Int?
  id_inscricao2   Int?
  chave           String
  id_vencedor     Int?
  dataPartida     String?
  horaPartida     String?
  local           Int?

  inscricao1      Inscricao?          @relation("inscricao1", fields: [id_inscricao], references: [id])
  inscricao2      Inscricao?          @relation("inscricao2", fields: [id_inscricao2], references: [id])
  Sets Sets[] @relation("sets")
  
  @@map("partidas")
}



model  Sets {
  id              Int                 @id @default(autoincrement())
  id_partida      Int
  tiebreak        Boolean
  pontTen1        Int
  pontTen2        Int

  partida         Partidas            @relation("sets", fields: [id_partida], references: [id])
    
  @@map("sets")
}

